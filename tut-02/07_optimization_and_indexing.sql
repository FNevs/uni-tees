-- Otimiza√ß√£o e Indexa√ß√£o no PostgreSQL com Full-Text Search

-- Criando um √≠ndice GIN diretamente sobre uma fun√ß√£o de tsvector()
CREATE INDEX idx_fts_post ON post
USING gin(
    setweight(to_tsvector(language, title), 'A') ||
    setweight(to_tsvector(language, content), 'B')
);

-- üß† GIN vs GiST:
-- GIN (Generalized Inverted Index)
-- - Mais r√°pido para consultas
-- - Mais pesado na constru√ß√£o
-- - Ideal para dados mais est√°ticos

-- GiST (Generalized Search Tree)
-- - Suporta atualiza√ß√£o mais r√°pida
-- - Pode gerar falsos positivos (precisa de verifica√ß√£o extra)
-- - Melhor para dados din√¢micos com menor vocabul√°rio (~100.000 lexemas)

-- üìå Recomenda√ß√£o geral:
-- Use GIN para dados est√°ticos ou leitura intensiva
-- Use GiST para dados din√¢micos com alta taxa de atualiza√ß√£o

-- üß± Problema: Documento distribu√≠do entre v√°rias tabelas
-- üí° Solu√ß√£o: Desnormalizar dados com *views materializadas* ou *triggers*

-- Criando uma VIEW MATERIALIZADA para busca
CREATE MATERIALIZED VIEW search_index AS
SELECT post.id,
       post.title,
       setweight(to_tsvector(post.language::regconfig, post.title), 'A') ||
       setweight(to_tsvector(post.language::regconfig, post.content), 'B') ||
       setweight(to_tsvector('simple', author.name), 'C') ||
       setweight(to_tsvector('simple', coalesce(string_agg(tag.name, ' '))), 'A') AS document
FROM post
JOIN author ON author.id = post.author_id
JOIN posts_tags ON posts_tags.post_id = post.id
JOIN tag ON tag.id = posts_tags.tag_id
GROUP BY post.id, author.id;

-- Atualiza√ß√£o peri√≥dica da view materializada
-- Reindexa√ß√£o simples com:
-- REFRESH MATERIALIZED VIEW search_index;

-- √çndice na view materializada
CREATE INDEX idx_fts_search ON search_index USING gin(document);

-- Consulta otimizada usando a view e o √≠ndice GIN
SELECT id AS post_id, title
FROM search_index
WHERE document @@ to_tsquery('english', 'Endangered & Species')
ORDER BY ts_rank(document, to_tsquery('english', 'Endangered & Species')) DESC;

-- üîÑ Alternativa para atualiza√ß√µes em tempo real:
-- Criar TRIGGERS com tsvector_update_trigger() ou tsvector_update_trigger_column()
-- Exemplo b√°sico:
-- ALTER TABLE post ADD COLUMN document tsvector;
-- CREATE TRIGGER tsv_update BEFORE INSERT OR UPDATE
-- ON post FOR EACH ROW EXECUTE FUNCTION
-- tsvector_update_trigger(document, 'pg_catalog.english', title, content);

-- ‚úîÔ∏è Conclus√£o:
-- A estrutura ideal de indexa√ß√£o depende de v√°rios fatores:
-- - Volume de dados
-- - Frequ√™ncia de atualiza√ß√£o
-- - N√∫mero de tabelas envolvidas
-- - Suporte a m√∫ltiplos idiomas
-- - N√≠vel aceit√°vel de atraso (real-time vs batch)